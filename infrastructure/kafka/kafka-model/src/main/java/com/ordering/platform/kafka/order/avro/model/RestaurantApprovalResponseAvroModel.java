/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ordering.platform.kafka.order.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RestaurantApprovalResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1005143443216093353L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RestaurantApprovalResponseAvroModel\",\"namespace\":\"com.ordering.platform.kafka.order.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"restaurantId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"orderStatus\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"PROCESSING\",\"CREATED\",\"COOKED\",\"CANCELLED\",\"APPROVED\"]}},{\"name\":\"dishList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Dish\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"productList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"logicalType\":\"uuid\"}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<RestaurantApprovalResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RestaurantApprovalResponseAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RestaurantApprovalResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RestaurantApprovalResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RestaurantApprovalResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RestaurantApprovalResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RestaurantApprovalResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RestaurantApprovalResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RestaurantApprovalResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID id;
  private java.util.UUID restaurantId;
  private java.util.UUID userId;
  private com.ordering.platform.kafka.order.avro.model.OrderStatus orderStatus;
  private java.util.List<com.ordering.platform.kafka.order.avro.model.Dish> dishList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RestaurantApprovalResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param restaurantId The new value for restaurantId
   * @param userId The new value for userId
   * @param orderStatus The new value for orderStatus
   * @param dishList The new value for dishList
   */
  public RestaurantApprovalResponseAvroModel(java.util.UUID id, java.util.UUID restaurantId, java.util.UUID userId, com.ordering.platform.kafka.order.avro.model.OrderStatus orderStatus, java.util.List<com.ordering.platform.kafka.order.avro.model.Dish> dishList) {
    this.id = id;
    this.restaurantId = restaurantId;
    this.userId = userId;
    this.orderStatus = orderStatus;
    this.dishList = dishList;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return restaurantId;
    case 2: return userId;
    case 3: return orderStatus;
    case 4: return dishList;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: restaurantId = (java.util.UUID)value$; break;
    case 2: userId = (java.util.UUID)value$; break;
    case 3: orderStatus = (com.ordering.platform.kafka.order.avro.model.OrderStatus)value$; break;
    case 4: dishList = (java.util.List<com.ordering.platform.kafka.order.avro.model.Dish>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'restaurantId' field.
   * @return The value of the 'restaurantId' field.
   */
  public java.util.UUID getRestaurantId() {
    return restaurantId;
  }


  /**
   * Sets the value of the 'restaurantId' field.
   * @param value the value to set.
   */
  public void setRestaurantId(java.util.UUID value) {
    this.restaurantId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.util.UUID getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.util.UUID value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'orderStatus' field.
   * @return The value of the 'orderStatus' field.
   */
  public com.ordering.platform.kafka.order.avro.model.OrderStatus getOrderStatus() {
    return orderStatus;
  }


  /**
   * Sets the value of the 'orderStatus' field.
   * @param value the value to set.
   */
  public void setOrderStatus(com.ordering.platform.kafka.order.avro.model.OrderStatus value) {
    this.orderStatus = value;
  }

  /**
   * Gets the value of the 'dishList' field.
   * @return The value of the 'dishList' field.
   */
  public java.util.List<com.ordering.platform.kafka.order.avro.model.Dish> getDishList() {
    return dishList;
  }


  /**
   * Sets the value of the 'dishList' field.
   * @param value the value to set.
   */
  public void setDishList(java.util.List<com.ordering.platform.kafka.order.avro.model.Dish> value) {
    this.dishList = value;
  }

  /**
   * Creates a new RestaurantApprovalResponseAvroModel RecordBuilder.
   * @return A new RestaurantApprovalResponseAvroModel RecordBuilder
   */
  public static com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder newBuilder() {
    return new com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder();
  }

  /**
   * Creates a new RestaurantApprovalResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RestaurantApprovalResponseAvroModel RecordBuilder
   */
  public static com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder newBuilder(com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder other) {
    if (other == null) {
      return new com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder();
    } else {
      return new com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new RestaurantApprovalResponseAvroModel RecordBuilder by copying an existing RestaurantApprovalResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new RestaurantApprovalResponseAvroModel RecordBuilder
   */
  public static com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder newBuilder(com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel other) {
    if (other == null) {
      return new com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder();
    } else {
      return new com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for RestaurantApprovalResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RestaurantApprovalResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<RestaurantApprovalResponseAvroModel> {

    private java.util.UUID id;
    private java.util.UUID restaurantId;
    private java.util.UUID userId;
    private com.ordering.platform.kafka.order.avro.model.OrderStatus orderStatus;
    private java.util.List<com.ordering.platform.kafka.order.avro.model.Dish> dishList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.restaurantId)) {
        this.restaurantId = data().deepCopy(fields()[1].schema(), other.restaurantId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[3].schema(), other.orderStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dishList)) {
        this.dishList = data().deepCopy(fields()[4].schema(), other.dishList);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing RestaurantApprovalResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.restaurantId)) {
        this.restaurantId = data().deepCopy(fields()[1].schema(), other.restaurantId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userId)) {
        this.userId = data().deepCopy(fields()[2].schema(), other.userId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[3].schema(), other.orderStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dishList)) {
        this.dishList = data().deepCopy(fields()[4].schema(), other.dishList);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'restaurantId' field.
      * @return The value.
      */
    public java.util.UUID getRestaurantId() {
      return restaurantId;
    }


    /**
      * Sets the value of the 'restaurantId' field.
      * @param value The value of 'restaurantId'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder setRestaurantId(java.util.UUID value) {
      validate(fields()[1], value);
      this.restaurantId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'restaurantId' field has been set.
      * @return True if the 'restaurantId' field has been set, false otherwise.
      */
    public boolean hasRestaurantId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'restaurantId' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder clearRestaurantId() {
      restaurantId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.util.UUID getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder setUserId(java.util.UUID value) {
      validate(fields()[2], value);
      this.userId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderStatus' field.
      * @return The value.
      */
    public com.ordering.platform.kafka.order.avro.model.OrderStatus getOrderStatus() {
      return orderStatus;
    }


    /**
      * Sets the value of the 'orderStatus' field.
      * @param value The value of 'orderStatus'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder setOrderStatus(com.ordering.platform.kafka.order.avro.model.OrderStatus value) {
      validate(fields()[3], value);
      this.orderStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderStatus' field has been set.
      * @return True if the 'orderStatus' field has been set, false otherwise.
      */
    public boolean hasOrderStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderStatus' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder clearOrderStatus() {
      orderStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dishList' field.
      * @return The value.
      */
    public java.util.List<com.ordering.platform.kafka.order.avro.model.Dish> getDishList() {
      return dishList;
    }


    /**
      * Sets the value of the 'dishList' field.
      * @param value The value of 'dishList'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder setDishList(java.util.List<com.ordering.platform.kafka.order.avro.model.Dish> value) {
      validate(fields()[4], value);
      this.dishList = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dishList' field has been set.
      * @return True if the 'dishList' field has been set, false otherwise.
      */
    public boolean hasDishList() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dishList' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.RestaurantApprovalResponseAvroModel.Builder clearDishList() {
      dishList = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RestaurantApprovalResponseAvroModel build() {
      try {
        RestaurantApprovalResponseAvroModel record = new RestaurantApprovalResponseAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.restaurantId = fieldSetFlags()[1] ? this.restaurantId : (java.util.UUID) defaultValue(fields()[1]);
        record.userId = fieldSetFlags()[2] ? this.userId : (java.util.UUID) defaultValue(fields()[2]);
        record.orderStatus = fieldSetFlags()[3] ? this.orderStatus : (com.ordering.platform.kafka.order.avro.model.OrderStatus) defaultValue(fields()[3]);
        record.dishList = fieldSetFlags()[4] ? this.dishList : (java.util.List<com.ordering.platform.kafka.order.avro.model.Dish>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RestaurantApprovalResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<RestaurantApprovalResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RestaurantApprovalResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<RestaurantApprovalResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










