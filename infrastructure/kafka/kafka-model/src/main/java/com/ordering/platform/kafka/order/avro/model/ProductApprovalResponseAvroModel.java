/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ordering.platform.kafka.order.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ProductApprovalResponseAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8795772286537354741L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ProductApprovalResponseAvroModel\",\"namespace\":\"com.ordering.platform.kafka.order.avro.model\",\"fields\":[{\"name\":\"restaurantId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orderId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"orderApprovalStatus\",\"type\":{\"type\":\"enum\",\"name\":\"OrderApprovalStatus\",\"symbols\":[\"PROCESSING\",\"CREATED\",\"COOKED\",\"CANCELLED\",\"APPROVED\"]}},{\"name\":\"productList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"logicalType\":\"uuid\"}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<ProductApprovalResponseAvroModel> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ProductApprovalResponseAvroModel> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ProductApprovalResponseAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ProductApprovalResponseAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ProductApprovalResponseAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ProductApprovalResponseAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ProductApprovalResponseAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ProductApprovalResponseAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ProductApprovalResponseAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String restaurantId;
  private java.lang.String userId;
  private java.lang.String orderId;
  private com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus orderApprovalStatus;
  private java.util.List<java.util.UUID> productList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ProductApprovalResponseAvroModel() {}

  /**
   * All-args constructor.
   * @param restaurantId The new value for restaurantId
   * @param userId The new value for userId
   * @param orderId The new value for orderId
   * @param orderApprovalStatus The new value for orderApprovalStatus
   * @param productList The new value for productList
   */
  public ProductApprovalResponseAvroModel(java.lang.String restaurantId, java.lang.String userId, java.lang.String orderId, com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus orderApprovalStatus, java.util.List<java.util.UUID> productList) {
    this.restaurantId = restaurantId;
    this.userId = userId;
    this.orderId = orderId;
    this.orderApprovalStatus = orderApprovalStatus;
    this.productList = productList;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return restaurantId;
    case 1: return userId;
    case 2: return orderId;
    case 3: return orderApprovalStatus;
    case 4: return productList;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: restaurantId = value$ != null ? value$.toString() : null; break;
    case 1: userId = value$ != null ? value$.toString() : null; break;
    case 2: orderId = value$ != null ? value$.toString() : null; break;
    case 3: orderApprovalStatus = (com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus)value$; break;
    case 4: productList = (java.util.List<java.util.UUID>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'restaurantId' field.
   * @return The value of the 'restaurantId' field.
   */
  public java.lang.String getRestaurantId() {
    return restaurantId;
  }


  /**
   * Sets the value of the 'restaurantId' field.
   * @param value the value to set.
   */
  public void setRestaurantId(java.lang.String value) {
    this.restaurantId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.String getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.String value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.String getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.String value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'orderApprovalStatus' field.
   * @return The value of the 'orderApprovalStatus' field.
   */
  public com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus getOrderApprovalStatus() {
    return orderApprovalStatus;
  }


  /**
   * Sets the value of the 'orderApprovalStatus' field.
   * @param value the value to set.
   */
  public void setOrderApprovalStatus(com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus value) {
    this.orderApprovalStatus = value;
  }

  /**
   * Gets the value of the 'productList' field.
   * @return The value of the 'productList' field.
   */
  public java.util.List<java.util.UUID> getProductList() {
    return productList;
  }


  /**
   * Sets the value of the 'productList' field.
   * @param value the value to set.
   */
  public void setProductList(java.util.List<java.util.UUID> value) {
    this.productList = value;
  }

  /**
   * Creates a new ProductApprovalResponseAvroModel RecordBuilder.
   * @return A new ProductApprovalResponseAvroModel RecordBuilder
   */
  public static com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder newBuilder() {
    return new com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder();
  }

  /**
   * Creates a new ProductApprovalResponseAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ProductApprovalResponseAvroModel RecordBuilder
   */
  public static com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder newBuilder(com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder other) {
    if (other == null) {
      return new com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder();
    } else {
      return new com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new ProductApprovalResponseAvroModel RecordBuilder by copying an existing ProductApprovalResponseAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new ProductApprovalResponseAvroModel RecordBuilder
   */
  public static com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder newBuilder(com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel other) {
    if (other == null) {
      return new com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder();
    } else {
      return new com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for ProductApprovalResponseAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ProductApprovalResponseAvroModel>
    implements org.apache.avro.data.RecordBuilder<ProductApprovalResponseAvroModel> {

    private java.lang.String restaurantId;
    private java.lang.String userId;
    private java.lang.String orderId;
    private com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus orderApprovalStatus;
    private java.util.List<java.util.UUID> productList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.restaurantId)) {
        this.restaurantId = data().deepCopy(fields()[0].schema(), other.restaurantId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.orderId)) {
        this.orderId = data().deepCopy(fields()[2].schema(), other.orderId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.orderApprovalStatus)) {
        this.orderApprovalStatus = data().deepCopy(fields()[3].schema(), other.orderApprovalStatus);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.productList)) {
        this.productList = data().deepCopy(fields()[4].schema(), other.productList);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ProductApprovalResponseAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.restaurantId)) {
        this.restaurantId = data().deepCopy(fields()[0].schema(), other.restaurantId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderId)) {
        this.orderId = data().deepCopy(fields()[2].schema(), other.orderId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.orderApprovalStatus)) {
        this.orderApprovalStatus = data().deepCopy(fields()[3].schema(), other.orderApprovalStatus);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productList)) {
        this.productList = data().deepCopy(fields()[4].schema(), other.productList);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'restaurantId' field.
      * @return The value.
      */
    public java.lang.String getRestaurantId() {
      return restaurantId;
    }


    /**
      * Sets the value of the 'restaurantId' field.
      * @param value The value of 'restaurantId'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder setRestaurantId(java.lang.String value) {
      validate(fields()[0], value);
      this.restaurantId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'restaurantId' field has been set.
      * @return True if the 'restaurantId' field has been set, false otherwise.
      */
    public boolean hasRestaurantId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'restaurantId' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder clearRestaurantId() {
      restaurantId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.String getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder setUserId(java.lang.String value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.String getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder setOrderId(java.lang.String value) {
      validate(fields()[2], value);
      this.orderId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderApprovalStatus' field.
      * @return The value.
      */
    public com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus getOrderApprovalStatus() {
      return orderApprovalStatus;
    }


    /**
      * Sets the value of the 'orderApprovalStatus' field.
      * @param value The value of 'orderApprovalStatus'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder setOrderApprovalStatus(com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus value) {
      validate(fields()[3], value);
      this.orderApprovalStatus = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'orderApprovalStatus' field has been set.
      * @return True if the 'orderApprovalStatus' field has been set, false otherwise.
      */
    public boolean hasOrderApprovalStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'orderApprovalStatus' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder clearOrderApprovalStatus() {
      orderApprovalStatus = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productList' field.
      * @return The value.
      */
    public java.util.List<java.util.UUID> getProductList() {
      return productList;
    }


    /**
      * Sets the value of the 'productList' field.
      * @param value The value of 'productList'.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder setProductList(java.util.List<java.util.UUID> value) {
      validate(fields()[4], value);
      this.productList = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productList' field has been set.
      * @return True if the 'productList' field has been set, false otherwise.
      */
    public boolean hasProductList() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'productList' field.
      * @return This builder.
      */
    public com.ordering.platform.kafka.order.avro.model.ProductApprovalResponseAvroModel.Builder clearProductList() {
      productList = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ProductApprovalResponseAvroModel build() {
      try {
        ProductApprovalResponseAvroModel record = new ProductApprovalResponseAvroModel();
        record.restaurantId = fieldSetFlags()[0] ? this.restaurantId : (java.lang.String) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.String) defaultValue(fields()[1]);
        record.orderId = fieldSetFlags()[2] ? this.orderId : (java.lang.String) defaultValue(fields()[2]);
        record.orderApprovalStatus = fieldSetFlags()[3] ? this.orderApprovalStatus : (com.ordering.platform.kafka.order.avro.model.OrderApprovalStatus) defaultValue(fields()[3]);
        record.productList = fieldSetFlags()[4] ? this.productList : (java.util.List<java.util.UUID>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ProductApprovalResponseAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<ProductApprovalResponseAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ProductApprovalResponseAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<ProductApprovalResponseAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










